[case testTryExcept1]
def g() -> None:
    try:
        object()
    except:
        print("weeee")
[out]
def g():
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4 :: tuple[object, object, object]
    r5 :: str
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: None
    r11 :: bool
    r12 :: None
L0:
L1:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    r3 = py_call(r2)
    goto L4
L2: (handler for L1)
    r4 = err_catch
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    r9 = py_call(r8, r5)
    r10 = cast(None, r9)
L3: (handler for L2)
    restore_exc_info r4
    r11 = no_err_occurred
L4:
    r12 = None
    return r12

[case testTryExcept2]
def g(b: bool) -> None:
    try:
        if b:
            object()
        else:
            str('hi')
    except:
        print("weeee")
[out]
def g(b):
    b :: bool
    r0 :: object
    r1 :: str
    r2, r3 :: object
    r4, r5 :: str
    r6 :: tuple[object, object, object]
    r7 :: str
    r8 :: object
    r9 :: str
    r10, r11 :: object
    r12 :: None
    r13 :: bool
    r14 :: None
L0:
L1:
    if b goto L2 else goto L3 :: bool
L2:
    r0 = builtins.module :: static
    r1 = unicode_0 :: static  ('object')
    r2 = getattr r0, r1
    r3 = py_call(r2)
    goto L4
L3:
    r4 = unicode_1 :: static  ('hi')
    r5 = str r4 :: object
L4:
    goto L7
L5: (handler for L1, L2, L3, L4)
    r6 = err_catch
    r7 = unicode_2 :: static  ('weeee')
    r8 = builtins.module :: static
    r9 = unicode_3 :: static  ('print')
    r10 = getattr r8, r9
    r11 = py_call(r10, r7)
    r12 = cast(None, r11)
L6: (handler for L5)
    restore_exc_info r6
    r13 = no_err_occurred
L7:
    r14 = None
    return r14

[case testTryExcept3]
def g() -> None:
    try:
        print('a')
        try:
            object()
        except:
            print('b')
    except:
        print("weeee")
[out]
def g():
    r0 :: str
    r1 :: object
    r2 :: str
    r3, r4 :: object
    r5 :: None
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: tuple[object, object, object]
    r11 :: str
    r12 :: object
    r13 :: str
    r14, r15 :: object
    r16 :: None
    r17 :: bool
    r18 :: tuple[object, object, object]
    r19 :: str
    r20 :: object
    r21 :: str
    r22, r23 :: object
    r24 :: None
    r25 :: bool
    r26 :: None
L0:
L1:
    r0 = unicode_0 :: static  ('a')
    r1 = builtins.module :: static
    r2 = unicode_1 :: static  ('print')
    r3 = getattr r1, r2
    r4 = py_call(r3, r0)
    r5 = cast(None, r4)
L2:
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('object')
    r8 = getattr r6, r7
    r9 = py_call(r8)
    goto L5
L3: (handler for L2)
    r10 = err_catch
    r11 = unicode_3 :: static  ('b')
    r12 = builtins.module :: static
    r13 = unicode_1 :: static  ('print')
    r14 = getattr r12, r13
    r15 = py_call(r14, r11)
    r16 = cast(None, r15)
L4: (handler for L3)
    restore_exc_info r10
    r17 = no_err_occurred
L5:
    goto L8
L6: (handler for L1, L4, L5)
    r18 = err_catch
    r19 = unicode_4 :: static  ('weeee')
    r20 = builtins.module :: static
    r21 = unicode_1 :: static  ('print')
    r22 = getattr r20, r21
    r23 = py_call(r22, r19)
    r24 = cast(None, r23)
L7: (handler for L6)
    restore_exc_info r18
    r25 = no_err_occurred
L8:
    r26 = None
    return r26

[case testTryExcept4]
def g() -> None:
    try:
        pass
    except KeyError:
        print("weeee")
    except IndexError:
        print("yo")
[out]
def g():
    r0 :: tuple[object, object, object]
    r1 :: object
    r2 :: str
    r3 :: object
    r4 :: bool
    r5 :: str
    r6 :: object
    r7 :: str
    r8, r9 :: object
    r10 :: None
    r11 :: object
    r12 :: str
    r13 :: object
    r14 :: bool
    r15 :: str
    r16 :: object
    r17 :: str
    r18, r19 :: object
    r20 :: None
    r21, r22 :: bool
    r23 :: None
L0:
L1:
    goto L8
L2: (handler for L1)
    r0 = err_catch
    r1 = builtins.module :: static
    r2 = unicode_0 :: static  ('KeyError')
    r3 = getattr r1, r2
    r4 = exc_matches r3
    if r4 goto L3 else goto L4 :: bool
L3:
    r5 = unicode_1 :: static  ('weeee')
    r6 = builtins.module :: static
    r7 = unicode_2 :: static  ('print')
    r8 = getattr r6, r7
    r9 = py_call(r8, r5)
    r10 = cast(None, r9)
    goto L7
L4:
    r11 = builtins.module :: static
    r12 = unicode_3 :: static  ('IndexError')
    r13 = getattr r11, r12
    r14 = exc_matches r13
    if r14 goto L5 else goto L6 :: bool
L5:
    r15 = unicode_4 :: static  ('yo')
    r16 = builtins.module :: static
    r17 = unicode_2 :: static  ('print')
    r18 = getattr r16, r17
    r19 = py_call(r18, r15)
    r20 = cast(None, r19)
    goto L7
L6:
    reraise_exc; r21 = 0
    unreachable
L7: (handler for L2, L3, L4, L5, L6)
    restore_exc_info r0
    r22 = no_err_occurred
L8:
    r23 = None
    return r23

[case testTryFinally]
def a(b: bool) -> None:
    try:
        if b:
            raise Exception('hi')
    finally:
        print('finally')
[out]
def a(b):
    b :: bool
    r0 :: None
    r1 :: str
    r2 :: object
    r3 :: str
    r4, r5, r6 :: object
    r7 :: bool
    r8 :: tuple[object, object, object]
    r9 :: None
    r10 :: tuple[object, object, object]
    r11 :: None
    r12 :: tuple[object, object, object]
    r13 :: str
    r14 :: object
    r15 :: str
    r16, r17 :: object
    r18 :: None
    r19, r20 :: bool
    r21 :: None
L0:
L1:
    if b goto L2 else goto L3 :: bool
L2:
    r1 = unicode_0 :: static  ('hi')
    r2 = builtins.module :: static
    r3 = unicode_1 :: static  ('Exception')
    r4 = getattr r2, r3
    r5 = py_call(r4, r1)
    r6 = type r5 :: object
    raise_exception(r6, r5); r7 = 0
    unreachable
L3:
L4:
    r9 = <error> :: None
    r0 = r9
L5:
    r10 = <error> :: tuple[object, object, object]
    r8 = r10
    goto L7
L6: (handler for L1, L2, L3)
    r11 = <error> :: None
    r0 = r11
    r12 = err_catch
    r8 = r12
L7:
    r13 = unicode_2 :: static  ('finally')
    r14 = builtins.module :: static
    r15 = unicode_3 :: static  ('print')
    r16 = getattr r14, r15
    r17 = py_call(r16, r13)
    r18 = cast(None, r17)
    if is_error(r8) goto L9 else goto L8
L8:
    reraise_exc; r19 = 0
    unreachable
L9:
    if is_error(r0) goto L11 else goto L10
L10:
    return r0
L11:
    goto L16
L12: (handler for L7, L8)
    if is_error(r0) goto L13 else goto L13
L13:
    if is_error(r8) goto L15 else goto L14
L14:
    restore_exc_info r8
L15:
    r20 = no_err_occurred
    unreachable
L16:
    r21 = None
    return r21
